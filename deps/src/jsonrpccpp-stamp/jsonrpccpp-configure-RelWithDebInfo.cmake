
cmake_minimum_required(VERSION ${CMAKE_VERSION}) # this file comes with cmake

set(command "/usr/local/bin/cmake;-DCMAKE_INSTALL_PREFIX=/Users/hanallen/go/src/fisco/FISCO-BCOS/deps;-DCMAKE_BUILD_TYPE=Release;-DCMAKE_POSITION_INDEPENDENT_CODE=OFF;-DBUILD_STATIC_LIBS=ON;-DBUILD_SHARED_LIBS=OFF;-DUNIX_DOMAIN_SOCKET_SERVER=OFF;-DUNIX_DOMAIN_SOCKET_CLIENT=OFF;-DHTTP_SERVER=ON;-DHTTP_CLIENT=OFF;-DCOMPILE_TESTS=OFF;-DCOMPILE_STUBGEN=OFF;-DCOMPILE_EXAMPLES=OFF;-DJSONCPP_INCLUDE_DIR=/Users/hanallen/go/src/fisco/FISCO-BCOS/deps/include;-DJSONCPP_INCLUDE_PREFIX=json;-DJSONCPP_LIBRARY=/Users/hanallen/go/src/fisco/FISCO-BCOS/deps/lib/libjsoncpp.a;-DMHD_INCLUDE_DIR=/Users/hanallen/go/src/fisco/FISCO-BCOS/deps/src/mhd/src/include/;-DMHD_LIBRARY=/Users/hanallen/go/src/fisco/FISCO-BCOS/deps/src/mhd/src/microhttpd/.libs/libmicrohttpd.a;-DCMAKE_C_COMPILER=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/cc;-DCMAKE_CXX_COMPILER=/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++;-GUnix Makefiles;-S;/Users/hanallen/go/src/fisco/FISCO-BCOS/deps/src/jsonrpccpp;-B;/Users/hanallen/go/src/fisco/FISCO-BCOS/deps/src/jsonrpccpp-build")
set(log_merged "")
set(log_output_on_failure "")
set(stdout_log "/Users/hanallen/go/src/fisco/FISCO-BCOS/deps/src/jsonrpccpp-stamp/jsonrpccpp-configure-out.log")
set(stderr_log "/Users/hanallen/go/src/fisco/FISCO-BCOS/deps/src/jsonrpccpp-stamp/jsonrpccpp-configure-err.log")
execute_process(
  COMMAND ${command}
  RESULT_VARIABLE result
  OUTPUT_FILE "${stdout_log}"
  ERROR_FILE "${stderr_log}"
)
macro(read_up_to_max_size log_file output_var)
  file(SIZE ${log_file} determined_size)
  set(max_size 10240)
  if (determined_size GREATER max_size)
    math(EXPR seek_position "${determined_size} - ${max_size}")
    file(READ ${log_file} ${output_var} OFFSET ${seek_position})
    set(${output_var} "...skipping to end...\n${${output_var}}")
  else()
    file(READ ${log_file} ${output_var})
  endif()
endmacro()
if(result)
  set(msg "Command failed: ${result}\n")
  foreach(arg IN LISTS command)
    set(msg "${msg} '${arg}'")
  endforeach()
  if (${log_merged})
    set(msg "${msg}\nSee also\n  ${stderr_log}")
  else()
    set(msg "${msg}\nSee also\n  /Users/hanallen/go/src/fisco/FISCO-BCOS/deps/src/jsonrpccpp-stamp/jsonrpccpp-configure-*.log")
  endif()
  if (${log_output_on_failure})
    message(SEND_ERROR "${msg}")
    if (${log_merged})
      read_up_to_max_size("${stderr_log}" error_log_contents)
      message(STATUS "Log output is:\n${error_log_contents}")
    else()
      read_up_to_max_size("${stdout_log}" out_log_contents)
      read_up_to_max_size("${stderr_log}" err_log_contents)
      message(STATUS "stdout output is:\n${out_log_contents}")
      message(STATUS "stderr output is:\n${err_log_contents}")
    endif()
    message(FATAL_ERROR "Stopping after outputting logs.")
  else()
    message(FATAL_ERROR "${msg}")
  endif()
else()
  if(NOT "Unix Makefiles" MATCHES "Ninja")
    set(msg "jsonrpccpp configure command succeeded.  See also /Users/hanallen/go/src/fisco/FISCO-BCOS/deps/src/jsonrpccpp-stamp/jsonrpccpp-configure-*.log")
    message(STATUS "${msg}")
  endif()
endif()
